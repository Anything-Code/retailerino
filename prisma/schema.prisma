datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}
    
generator client {
    provider = "prisma-client-js"
}

generator nexusPrisma {
   provider = "nexus-prisma"
}

/// A user
model User {
    cuid          String     @id @default(cuid())
    firstname     String
    lastname      String
    phoneNumber   String
    email         String     @unique
    password      String
    role          Role       @relation(fields: [roleId], references: [id])
    roleId        Int
    lastUserAgent String
    lastLogin     DateTime   @default(now())
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    verifiedAt    DateTime?
    cartItems     CartItem[]
    addresses     Address[]
    orders        Order[]
    reviews       Review[]
}

model Role {
    id    Int    @id @default(autoincrement())
    name  String
    users User[]
}

model InventoryItem {
    uBarcode         Int            @id
    note             String
    inventoryGroup   InventoryGroup @relation(fields: [inventoryGroupId], references: [id])
    inventoryGroupId Int
    arrivedAt        DateTime
    shippedAt        DateTime
    soldAt           DateTime
}

model InventoryGroup {
    id                       Int                          @id @default(autoincrement())
    itemName                 String
    price                    Float
    amount                   Int
    displayAmount            Int
    inventoryItems           InventoryItem[]
    updatedAt                DateTime                     @updatedAt
    images                   InventoryGroupImage[]
    inventoryGroupFroms      InventoryGroupRelationship[] @relation("inventoryGroupIdFrom")
    inventoryGroupTos        InventoryGroupRelationship[] @relation("inventoryGroupIdTo")
    cartItems                CartItem[]
    inventoryGroupCategories InventoryGroupCategory[]
    orderItems               OrderItem[]
    reviews                  Review[]
}

model Image {
    id              Int                   @id @default(autoincrement())
    url             String                @unique
    inventoryGroups InventoryGroupImage[]
}

model InventoryGroupImage {
    inventoryGroup   InventoryGroup @relation(fields: [inventoryGroupId], references: [id])
    inventoryGroupId Int
    image            Image          @relation(fields: [imageId], references: [id])
    imageId          Int

    @@id([inventoryGroupId, imageId])
}

model InventoryGroupRelationship {
    from             InventoryGroup @relation(name: "inventoryGroupIdFrom", fields: [inventoryGroupId], references: [id])
    to               InventoryGroup @relation(name: "inventoryGroupIdTo", fields: [inventoryGroupId], references: [id])
    inventoryGroupId Int

    @@id([inventoryGroupId])
}

model CartItem {
    inventoryGroup   InventoryGroup @relation(fields: [inventoryGroupId], references: [id])
    inventoryGroupId Int
    user             User           @relation(fields: [userUId], references: [cuid])
    userUId          String

    @@id([inventoryGroupId, userUId])
}

model Category {
    id                       Int                      @id @default(autoincrement())
    name                     String
    inventoryGroupCategories InventoryGroupCategory[]
}

model InventoryGroupCategory {
    inventoryGroup   InventoryGroup @relation(fields: [inventoryGroupId], references: [id])
    inventoryGroupId Int
    category         Category       @relation(fields: [categoryId], references: [id])
    categoryId       Int

    @@id([inventoryGroupId, categoryId])
}

model Address {
    id      Int     @id @default(autoincrement())
    street  String
    city    String
    zip     BigInt
    country String
    user    User    @relation(fields: [userUId], references: [cuid])
    userUId String
    orders  Order[]
}

model DeliveryServiceProvider {
    id         Int      @id @default(autoincrement())
    name       String
    pickupTime DateTime
    orders     Order[]
}

model Order {
    id                        Int                     @id @default(autoincrement())
    cofirmed                  Boolean
    user                      User                    @relation(fields: [userUId], references: [cuid])
    userUId                   String
    address                   Address                 @relation(fields: [addressId], references: [id])
    addressId                 Int
    deliveryServiceProvicer   DeliveryServiceProvider @relation(fields: [deliveryServiceProvicerId], references: [id])
    deliveryServiceProvicerId Int
    createdAt                 DateTime                @default(now())
    orderItems                OrderItem[]
}

model OrderItem {
    inventoryGroup   InventoryGroup @relation(fields: [inventoryGroupId], references: [id])
    inventoryGroupId Int
    order            Order          @relation(fields: [orderId], references: [id])
    orderId          Int

    @@id([inventoryGroupId, orderId])
}

model Review {
    id               Int            @id @default(autoincrement())
    inventoryGroup   InventoryGroup @relation(fields: [inventoryGroupId], references: [id])
    inventoryGroupId Int
    user             User           @relation(fields: [userUId], references: [cuid])
    userUId          String
    description      String
    rating           Int
}
