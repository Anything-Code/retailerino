/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from "./../node_modules/.prisma/client/index"
import type { Context } from "./../src/context"
import type { FieldShieldResolver, ObjectTypeShieldResolver } from "nexus-shield"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Address: prisma.Address;
  CartItem: prisma.CartItem;
  Category: prisma.Category;
  DeliveryServiceProvider: prisma.DeliveryServiceProvider;
  Image: prisma.Image;
  InventoryGroup: prisma.InventoryGroup;
  InventoryGroupCategory: prisma.InventoryGroupCategory;
  InventoryGroupImage: prisma.InventoryGroupImage;
  InventoryGroupRelationship: prisma.InventoryGroupRelationship;
  InventoryItem: prisma.InventoryItem;
  Mutation: {};
  Order: prisma.Order;
  OrderItem: prisma.OrderItem;
  Query: {};
  Review: prisma.Review;
  Role: prisma.Role;
  User: prisma.User;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Address: { // field return type
    city: string; // String!
    country: string; // String!
    id: number; // Int!
    orders: NexusGenRootTypes['Order'][]; // [Order!]!
    street: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userUId: string; // String!
    zip: NexusGenScalars['BigInt']; // BigInt!
  }
  CartItem: { // field return type
    inventoryGroup: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
    inventoryGroupId: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userUId: string; // String!
  }
  Category: { // field return type
    id: number; // Int!
    inventoryGroupCategories: NexusGenRootTypes['InventoryGroupCategory'][]; // [InventoryGroupCategory!]!
    name: string; // String!
  }
  DeliveryServiceProvider: { // field return type
    id: number; // Int!
    name: string; // String!
    orders: NexusGenRootTypes['Order'][]; // [Order!]!
    pickupTime: NexusGenScalars['DateTime']; // DateTime!
  }
  Image: { // field return type
    id: number; // Int!
    inventoryGroups: NexusGenRootTypes['InventoryGroupImage'][]; // [InventoryGroupImage!]!
    url: string; // String!
  }
  InventoryGroup: { // field return type
    amount: number; // Int!
    cartItems: NexusGenRootTypes['CartItem'][]; // [CartItem!]!
    displayAmount: number; // Int!
    id: number; // Int!
    images: NexusGenRootTypes['InventoryGroupImage'][]; // [InventoryGroupImage!]!
    inventoryGroupCategories: NexusGenRootTypes['InventoryGroupCategory'][]; // [InventoryGroupCategory!]!
    inventoryGroupFroms: NexusGenRootTypes['InventoryGroupRelationship'][]; // [InventoryGroupRelationship!]!
    inventoryGroupTos: NexusGenRootTypes['InventoryGroupRelationship'][]; // [InventoryGroupRelationship!]!
    inventoryItems: NexusGenRootTypes['InventoryItem'][]; // [InventoryItem!]!
    itemName: string; // String!
    orderItems: NexusGenRootTypes['OrderItem'][]; // [OrderItem!]!
    price: number; // Float!
    reviews: NexusGenRootTypes['Review'][]; // [Review!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  InventoryGroupCategory: { // field return type
    category: NexusGenRootTypes['Category']; // Category!
    categoryId: number; // Int!
    inventoryGroup: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
    inventoryGroupId: number; // Int!
  }
  InventoryGroupImage: { // field return type
    image: NexusGenRootTypes['Image']; // Image!
    imageId: number; // Int!
    inventoryGroup: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
    inventoryGroupId: number; // Int!
  }
  InventoryGroupRelationship: { // field return type
    from: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
    inventoryGroupId: number; // Int!
    to: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
  }
  InventoryItem: { // field return type
    arrivedAt: NexusGenScalars['DateTime']; // DateTime!
    inventoryGroup: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
    inventoryGroupId: number; // Int!
    note: string; // String!
    shippedAt: NexusGenScalars['DateTime']; // DateTime!
    soldAt: NexusGenScalars['DateTime']; // DateTime!
    uBarcode: number; // Int!
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['User'] | null; // User
    logout: boolean | null; // Boolean
  }
  Order: { // field return type
    address: NexusGenRootTypes['Address']; // Address!
    addressId: number; // Int!
    cofirmed: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    deliveryServiceProvicer: NexusGenRootTypes['DeliveryServiceProvider']; // DeliveryServiceProvider!
    deliveryServiceProvicerId: number; // Int!
    id: number; // Int!
    orderItems: NexusGenRootTypes['OrderItem'][]; // [OrderItem!]!
    user: NexusGenRootTypes['User']; // User!
    userUId: string; // String!
  }
  OrderItem: { // field return type
    inventoryGroup: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
    inventoryGroupId: number; // Int!
    order: NexusGenRootTypes['Order']; // Order!
    orderId: number; // Int!
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  Review: { // field return type
    description: string; // String!
    id: number; // Int!
    inventoryGroup: NexusGenRootTypes['InventoryGroup']; // InventoryGroup!
    inventoryGroupId: number; // Int!
    rating: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userUId: string; // String!
  }
  Role: { // field return type
    id: number; // Int!
    name: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    addresses: NexusGenRootTypes['Address'][]; // [Address!]!
    cartItems: NexusGenRootTypes['CartItem'][]; // [CartItem!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    cuid: string; // ID!
    email: string; // String!
    firstname: string; // String!
    lastLogin: NexusGenScalars['DateTime']; // DateTime!
    lastUserAgent: string; // String!
    lastname: string; // String!
    orders: NexusGenRootTypes['Order'][]; // [Order!]!
    phoneNumber: string; // String!
    reviews: NexusGenRootTypes['Review'][]; // [Review!]!
    role: NexusGenRootTypes['Role']; // Role!
    roleId: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    verifiedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Address: { // field return type name
    city: 'String'
    country: 'String'
    id: 'Int'
    orders: 'Order'
    street: 'String'
    user: 'User'
    userUId: 'String'
    zip: 'BigInt'
  }
  CartItem: { // field return type name
    inventoryGroup: 'InventoryGroup'
    inventoryGroupId: 'Int'
    user: 'User'
    userUId: 'String'
  }
  Category: { // field return type name
    id: 'Int'
    inventoryGroupCategories: 'InventoryGroupCategory'
    name: 'String'
  }
  DeliveryServiceProvider: { // field return type name
    id: 'Int'
    name: 'String'
    orders: 'Order'
    pickupTime: 'DateTime'
  }
  Image: { // field return type name
    id: 'Int'
    inventoryGroups: 'InventoryGroupImage'
    url: 'String'
  }
  InventoryGroup: { // field return type name
    amount: 'Int'
    cartItems: 'CartItem'
    displayAmount: 'Int'
    id: 'Int'
    images: 'InventoryGroupImage'
    inventoryGroupCategories: 'InventoryGroupCategory'
    inventoryGroupFroms: 'InventoryGroupRelationship'
    inventoryGroupTos: 'InventoryGroupRelationship'
    inventoryItems: 'InventoryItem'
    itemName: 'String'
    orderItems: 'OrderItem'
    price: 'Float'
    reviews: 'Review'
    updatedAt: 'DateTime'
  }
  InventoryGroupCategory: { // field return type name
    category: 'Category'
    categoryId: 'Int'
    inventoryGroup: 'InventoryGroup'
    inventoryGroupId: 'Int'
  }
  InventoryGroupImage: { // field return type name
    image: 'Image'
    imageId: 'Int'
    inventoryGroup: 'InventoryGroup'
    inventoryGroupId: 'Int'
  }
  InventoryGroupRelationship: { // field return type name
    from: 'InventoryGroup'
    inventoryGroupId: 'Int'
    to: 'InventoryGroup'
  }
  InventoryItem: { // field return type name
    arrivedAt: 'DateTime'
    inventoryGroup: 'InventoryGroup'
    inventoryGroupId: 'Int'
    note: 'String'
    shippedAt: 'DateTime'
    soldAt: 'DateTime'
    uBarcode: 'Int'
  }
  Mutation: { // field return type name
    login: 'User'
    logout: 'Boolean'
  }
  Order: { // field return type name
    address: 'Address'
    addressId: 'Int'
    cofirmed: 'Boolean'
    createdAt: 'DateTime'
    deliveryServiceProvicer: 'DeliveryServiceProvider'
    deliveryServiceProvicerId: 'Int'
    id: 'Int'
    orderItems: 'OrderItem'
    user: 'User'
    userUId: 'String'
  }
  OrderItem: { // field return type name
    inventoryGroup: 'InventoryGroup'
    inventoryGroupId: 'Int'
    order: 'Order'
    orderId: 'Int'
  }
  Query: { // field return type name
    ok: 'Boolean'
  }
  Review: { // field return type name
    description: 'String'
    id: 'Int'
    inventoryGroup: 'InventoryGroup'
    inventoryGroupId: 'Int'
    rating: 'Int'
    user: 'User'
    userUId: 'String'
  }
  Role: { // field return type name
    id: 'Int'
    name: 'String'
    users: 'User'
  }
  User: { // field return type name
    addresses: 'Address'
    cartItems: 'CartItem'
    createdAt: 'DateTime'
    cuid: 'ID'
    email: 'String'
    firstname: 'String'
    lastLogin: 'DateTime'
    lastUserAgent: 'String'
    lastname: 'String'
    orders: 'Order'
    phoneNumber: 'String'
    reviews: 'Review'
    role: 'Role'
    roleId: 'Int'
    updatedAt: 'DateTime'
    verifiedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      email: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Default authorization rule to execute on all fields of this object
     */
    shield?: ObjectTypeShieldResolver<TypeName>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization rule to execute for this field
     */
    shield?: FieldShieldResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}